// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: user.sql

package db

import (
	"context"
	"time"
)

const CreateUser = `-- name: CreateUser :one
INSERT INTO tb_users (
    phone_number,
    name
) VALUES($1, $2) RETURNING id, role_id, phone_number, password, name, avatar, openid, unionid, created_at, updated_at, deleted_at
`

type CreateUserParams struct {
	PhoneNumber string `json:"phone_number"`
	Name        string `json:"name"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (*TbUser, error) {
	row := q.queryRow(ctx, q.createUserStmt, CreateUser, arg.PhoneNumber, arg.Name)
	var i TbUser
	err := row.Scan(
		&i.ID,
		&i.RoleID,
		&i.PhoneNumber,
		&i.Password,
		&i.Name,
		&i.Avatar,
		&i.Openid,
		&i.Unionid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const GetUser = `-- name: GetUser :one
SELECT id, role_id, phone_number, password, name, avatar, openid, unionid, created_at, updated_at, deleted_at FROM tb_users WHERE id = $1 AND deleted_at IS NULL LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (*TbUser, error) {
	row := q.queryRow(ctx, q.getUserStmt, GetUser, id)
	var i TbUser
	err := row.Scan(
		&i.ID,
		&i.RoleID,
		&i.PhoneNumber,
		&i.Password,
		&i.Name,
		&i.Avatar,
		&i.Openid,
		&i.Unionid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const GetUserByPhone = `-- name: GetUserByPhone :one
SELECT id, role_id, phone_number, password, name, avatar, openid, unionid, created_at, updated_at, deleted_at FROM tb_users WHERE phone_number = $1 AND deleted_at IS NULL LIMIT 1
`

func (q *Queries) GetUserByPhone(ctx context.Context, phoneNumber string) (*TbUser, error) {
	row := q.queryRow(ctx, q.getUserByPhoneStmt, GetUserByPhone, phoneNumber)
	var i TbUser
	err := row.Scan(
		&i.ID,
		&i.RoleID,
		&i.PhoneNumber,
		&i.Password,
		&i.Name,
		&i.Avatar,
		&i.Openid,
		&i.Unionid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const UpdateUser = `-- name: UpdateUser :one
UPDATE tb_users 
SET 
    name = $2,
    avatar = $3,
    openid = $4,
    unionid = $5,
    updated_at = $6
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, role_id, phone_number, password, name, avatar, openid, unionid, created_at, updated_at, deleted_at
`

type UpdateUserParams struct {
	ID        int64     `json:"id"`
	Name      string    `json:"name"`
	Avatar    *string   `json:"avatar"`
	Openid    *string   `json:"openid"`
	Unionid   *string   `json:"unionid"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (*TbUser, error) {
	row := q.queryRow(ctx, q.updateUserStmt, UpdateUser,
		arg.ID,
		arg.Name,
		arg.Avatar,
		arg.Openid,
		arg.Unionid,
		arg.UpdatedAt,
	)
	var i TbUser
	err := row.Scan(
		&i.ID,
		&i.RoleID,
		&i.PhoneNumber,
		&i.Password,
		&i.Name,
		&i.Avatar,
		&i.Openid,
		&i.Unionid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}
