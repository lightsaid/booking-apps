// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: halls.sql

package dbrepo

import (
	"context"
)

const CreateHall = `-- name: CreateHall :one
INSERT INTO tb_halls("theater_id", "name", "total_seats") VALUES($1, $2, $3) RETURNING id, theater_id, name, total_seats, created_at, updated_at, deleted_at
`

type CreateHallParams struct {
	TheaterID  int64  `db:"theater_id" json:"theater_id"`
	Name       string `db:"name" json:"name"`
	TotalSeats *int32 `db:"total_seats" json:"total_seats"`
}

func (q *Queries) CreateHall(ctx context.Context, arg CreateHallParams) (*TbHall, error) {
	row := q.queryRow(ctx, q.createHallStmt, CreateHall, arg.TheaterID, arg.Name, arg.TotalSeats)
	var i TbHall
	err := row.Scan(
		&i.ID,
		&i.TheaterID,
		&i.Name,
		&i.TotalSeats,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const DeleteHall = `-- name: DeleteHall :one
UPDATE tb_halls
SET deleted_at = now() WHERE deleted_at IS NULL RETURNING id, theater_id, name, total_seats, created_at, updated_at, deleted_at
`

func (q *Queries) DeleteHall(ctx context.Context) (*TbHall, error) {
	row := q.queryRow(ctx, q.deleteHallStmt, DeleteHall)
	var i TbHall
	err := row.Scan(
		&i.ID,
		&i.TheaterID,
		&i.Name,
		&i.TotalSeats,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const GetHall = `-- name: GetHall :one
SELECT id, theater_id, name, total_seats, created_at, updated_at, deleted_at FROM tb_halls WHERE id=$1 AND deleted_at IS NULL LIMIT 1
`

func (q *Queries) GetHall(ctx context.Context, id int64) (*TbHall, error) {
	row := q.queryRow(ctx, q.getHallStmt, GetHall, id)
	var i TbHall
	err := row.Scan(
		&i.ID,
		&i.TheaterID,
		&i.Name,
		&i.TotalSeats,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const ListHalls = `-- name: ListHalls :many
SELECT id, theater_id, name, total_seats, created_at, updated_at, deleted_at FROM tb_halls WHERE deleted_at IS NULL LIMIT $1 OFFSET $2
`

type ListHallsParams struct {
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

func (q *Queries) ListHalls(ctx context.Context, arg ListHallsParams) ([]*TbHall, error) {
	rows, err := q.query(ctx, q.listHallsStmt, ListHalls, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*TbHall{}
	for rows.Next() {
		var i TbHall
		if err := rows.Scan(
			&i.ID,
			&i.TheaterID,
			&i.Name,
			&i.TotalSeats,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateHall = `-- name: UpdateHall :one
UPDATE tb_halls
SET 
    "theater_id"=$2, "name"=$3, "total_seats"=$4 
WHERE id=$1 AND  deleted_at IS NULL RETURNING id, theater_id, name, total_seats, created_at, updated_at, deleted_at
`

type UpdateHallParams struct {
	ID         int64  `db:"id" json:"id"`
	TheaterID  int64  `db:"theater_id" json:"theater_id"`
	Name       string `db:"name" json:"name"`
	TotalSeats *int32 `db:"total_seats" json:"total_seats"`
}

func (q *Queries) UpdateHall(ctx context.Context, arg UpdateHallParams) (*TbHall, error) {
	row := q.queryRow(ctx, q.updateHallStmt, UpdateHall,
		arg.ID,
		arg.TheaterID,
		arg.Name,
		arg.TotalSeats,
	)
	var i TbHall
	err := row.Scan(
		&i.ID,
		&i.TheaterID,
		&i.Name,
		&i.TotalSeats,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}
