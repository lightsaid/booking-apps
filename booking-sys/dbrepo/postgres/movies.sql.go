// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: movies.sql

package dbrepo

import (
	"context"
	"time"
)

const CreateMovie = `-- name: CreateMovie :one
INSERT INTO tb_movies(
    title,
    release_date,
    director,
    poster,
    duration,
    genre,
    star,
    "description"
)VALUES($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, title, release_date, director, poster, duration, genre, star, description, created_at, updated_at, deleted_at
`

type CreateMovieParams struct {
	Title       string    `json:"title"`
	ReleaseDate time.Time `json:"release_date"`
	Director    string    `json:"director"`
	Poster      string    `json:"poster"`
	Duration    int32     `json:"duration"`
	Genre       *string   `json:"genre"`
	Star        *string   `json:"star"`
	Description *string   `json:"description"`
}

func (q *Queries) CreateMovie(ctx context.Context, arg CreateMovieParams) (*TbMovie, error) {
	row := q.queryRow(ctx, q.createMovieStmt, CreateMovie,
		arg.Title,
		arg.ReleaseDate,
		arg.Director,
		arg.Poster,
		arg.Duration,
		arg.Genre,
		arg.Star,
		arg.Description,
	)
	var i TbMovie
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.ReleaseDate,
		&i.Director,
		&i.Poster,
		&i.Duration,
		&i.Genre,
		&i.Star,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const DeleteMovie = `-- name: DeleteMovie :one
UPDATE tb_movies SET deleted_at = now() WHERE id = $1 AND deleted_at IS NOT NULL RETURNING id, title, release_date, director, poster, duration, genre, star, description, created_at, updated_at, deleted_at
`

func (q *Queries) DeleteMovie(ctx context.Context, id int64) (*TbMovie, error) {
	row := q.queryRow(ctx, q.deleteMovieStmt, DeleteMovie, id)
	var i TbMovie
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.ReleaseDate,
		&i.Director,
		&i.Poster,
		&i.Duration,
		&i.Genre,
		&i.Star,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const GetMovie = `-- name: GetMovie :one
SELECT id, title, release_date, director, poster, duration, genre, star, description, created_at, updated_at, deleted_at FROM tb_movies WHERE id = $1 AND deleted_at IS NULL LIMIT 1
`

func (q *Queries) GetMovie(ctx context.Context, id int64) (*TbMovie, error) {
	row := q.queryRow(ctx, q.getMovieStmt, GetMovie, id)
	var i TbMovie
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.ReleaseDate,
		&i.Director,
		&i.Poster,
		&i.Duration,
		&i.Genre,
		&i.Star,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const ListMovies = `-- name: ListMovies :many
SELECT count(*) over(), id, title, release_date, director, poster, duration, genre, star, description, created_at, updated_at, deleted_at FROM tb_movies WHERE deleted_at IS NULL ORDER BY created_at LIMIT $1 OFFSET $2
`

type ListMoviesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListMoviesRow struct {
	Count       int64      `json:"count"`
	ID          int64      `json:"id"`
	Title       string     `json:"title"`
	ReleaseDate time.Time  `json:"release_date"`
	Director    string     `json:"director"`
	Poster      string     `json:"poster"`
	Duration    int32      `json:"duration"`
	Genre       *string    `json:"genre"`
	Star        *string    `json:"star"`
	Description *string    `json:"description"`
	CreatedAt   time.Time  `json:"created_at"`
	UpdatedAt   time.Time  `json:"updated_at"`
	DeletedAt   *time.Time `json:"deleted_at"`
}

func (q *Queries) ListMovies(ctx context.Context, arg ListMoviesParams) ([]*ListMoviesRow, error) {
	rows, err := q.query(ctx, q.listMoviesStmt, ListMovies, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ListMoviesRow{}
	for rows.Next() {
		var i ListMoviesRow
		if err := rows.Scan(
			&i.Count,
			&i.ID,
			&i.Title,
			&i.ReleaseDate,
			&i.Director,
			&i.Poster,
			&i.Duration,
			&i.Genre,
			&i.Star,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateMovie = `-- name: UpdateMovie :one
UPDATE tb_movies SET 
    title = $2,
    release_date = $3,
    director = $4,
    poster = $5,
    duration = $6,
    genre = $7,
    star = $8,
    "description" = $9
WHERE id = $1 AND deleted_at IS NOT NULL 
RETURNING id, title, release_date, director, poster, duration, genre, star, description, created_at, updated_at, deleted_at
`

type UpdateMovieParams struct {
	ID          int64     `json:"id"`
	Title       string    `json:"title"`
	ReleaseDate time.Time `json:"release_date"`
	Director    string    `json:"director"`
	Poster      string    `json:"poster"`
	Duration    int32     `json:"duration"`
	Genre       *string   `json:"genre"`
	Star        *string   `json:"star"`
	Description *string   `json:"description"`
}

func (q *Queries) UpdateMovie(ctx context.Context, arg UpdateMovieParams) (*TbMovie, error) {
	row := q.queryRow(ctx, q.updateMovieStmt, UpdateMovie,
		arg.ID,
		arg.Title,
		arg.ReleaseDate,
		arg.Director,
		arg.Poster,
		arg.Duration,
		arg.Genre,
		arg.Star,
		arg.Description,
	)
	var i TbMovie
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.ReleaseDate,
		&i.Director,
		&i.Poster,
		&i.Duration,
		&i.Genre,
		&i.Star,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}
