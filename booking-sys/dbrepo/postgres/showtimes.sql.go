// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: showtimes.sql

package dbrepo

import (
	"context"
	"time"
)

const CreateShowtime = `-- name: CreateShowtime :one
INSERT INTO tb_showtimes(
    movie_id,
    hall_id,
    start_time,
    end_time
)
VALUES($1, $2, $3, $4) RETURNING id, movie_id, hall_id, start_time, end_time, created_at, updated_at, deleted_at
`

type CreateShowtimeParams struct {
	MovieID   int64     `json:"movie_id"`
	HallID    int64     `json:"hall_id"`
	StartTime time.Time `json:"start_time"`
	EndTime   time.Time `json:"end_time"`
}

func (q *Queries) CreateShowtime(ctx context.Context, arg CreateShowtimeParams) (*TbShowtime, error) {
	row := q.queryRow(ctx, q.createShowtimeStmt, CreateShowtime,
		arg.MovieID,
		arg.HallID,
		arg.StartTime,
		arg.EndTime,
	)
	var i TbShowtime
	err := row.Scan(
		&i.ID,
		&i.MovieID,
		&i.HallID,
		&i.StartTime,
		&i.EndTime,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const DeleteShowtime = `-- name: DeleteShowtime :one
UPDATE tb_showtimes SET deleted_at = now() WHERE id = $1 AND deleted_at IS NOT NULL RETURNING id, movie_id, hall_id, start_time, end_time, created_at, updated_at, deleted_at
`

func (q *Queries) DeleteShowtime(ctx context.Context, id int64) (*TbShowtime, error) {
	row := q.queryRow(ctx, q.deleteShowtimeStmt, DeleteShowtime, id)
	var i TbShowtime
	err := row.Scan(
		&i.ID,
		&i.MovieID,
		&i.HallID,
		&i.StartTime,
		&i.EndTime,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const GetShowtime = `-- name: GetShowtime :one
SELECT id, movie_id, hall_id, start_time, end_time, created_at, updated_at, deleted_at FROM tb_showtimes WHERE id = $1 AND deleted_at IS NULL LIMIT 1
`

func (q *Queries) GetShowtime(ctx context.Context, id int64) (*TbShowtime, error) {
	row := q.queryRow(ctx, q.getShowtimeStmt, GetShowtime, id)
	var i TbShowtime
	err := row.Scan(
		&i.ID,
		&i.MovieID,
		&i.HallID,
		&i.StartTime,
		&i.EndTime,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const ListShowtimes = `-- name: ListShowtimes :many
SELECT id, movie_id, hall_id, start_time, end_time, created_at, updated_at, deleted_at FROM tb_showtimes WHERE deleted_at IS NULL ORDER BY created_at LIMIT $1 OFFSET $2
`

type ListShowtimesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListShowtimes(ctx context.Context, arg ListShowtimesParams) ([]*TbShowtime, error) {
	rows, err := q.query(ctx, q.listShowtimesStmt, ListShowtimes, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*TbShowtime{}
	for rows.Next() {
		var i TbShowtime
		if err := rows.Scan(
			&i.ID,
			&i.MovieID,
			&i.HallID,
			&i.StartTime,
			&i.EndTime,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateShowtime = `-- name: UpdateShowtime :one
UPDATE tb_showtimes SET 
    movie_id = $2,
    hall_id = $3,
    start_time = $4,
    end_time = $5
WHERE id = $1 AND deleted_at IS NOT NULL
RETURNING id, movie_id, hall_id, start_time, end_time, created_at, updated_at, deleted_at
`

type UpdateShowtimeParams struct {
	ID        int64     `json:"id"`
	MovieID   int64     `json:"movie_id"`
	HallID    int64     `json:"hall_id"`
	StartTime time.Time `json:"start_time"`
	EndTime   time.Time `json:"end_time"`
}

func (q *Queries) UpdateShowtime(ctx context.Context, arg UpdateShowtimeParams) (*TbShowtime, error) {
	row := q.queryRow(ctx, q.updateShowtimeStmt, UpdateShowtime,
		arg.ID,
		arg.MovieID,
		arg.HallID,
		arg.StartTime,
		arg.EndTime,
	)
	var i TbShowtime
	err := row.Scan(
		&i.ID,
		&i.MovieID,
		&i.HallID,
		&i.StartTime,
		&i.EndTime,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}
