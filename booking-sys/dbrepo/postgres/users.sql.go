// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: users.sql

package dbrepo

import (
	"context"
	"database/sql"
	"time"
)

const CreateUser = `-- name: CreateUser :one
INSERT INTO tb_users (
    role_id,
    phone_number,
    password,
    name,
    avatar,
    openid,
    unionid
) VALUES($1, $2, $3, $4, $5, $6, $7) RETURNING id, role_id, phone_number, password, name, avatar, openid, unionid, created_at, updated_at, deleted_at
`

type CreateUserParams struct {
	RoleID      int64          `db:"role_id" json:"role_id"`
	PhoneNumber string         `db:"phone_number" json:"phone_number"`
	Password    sql.NullString `db:"password" json:"password"`
	Name        string         `db:"name" json:"name"`
	Avatar      sql.NullString `db:"avatar" json:"avatar"`
	Openid      sql.NullString `db:"openid" json:"openid"`
	Unionid     sql.NullString `db:"unionid" json:"unionid"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (*TbUser, error) {
	row := q.queryRow(ctx, q.createUserStmt, CreateUser,
		arg.RoleID,
		arg.PhoneNumber,
		arg.Password,
		arg.Name,
		arg.Avatar,
		arg.Openid,
		arg.Unionid,
	)
	var i TbUser
	err := row.Scan(
		&i.ID,
		&i.RoleID,
		&i.PhoneNumber,
		&i.Password,
		&i.Name,
		&i.Avatar,
		&i.Openid,
		&i.Unionid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const DeleteUser = `-- name: DeleteUser :one
UPDATE tb_users 
    SET deleted_at = $2
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, role_id, phone_number, password, name, avatar, openid, unionid, created_at, updated_at, deleted_at
`

type DeleteUserParams struct {
	ID        int64        `db:"id" json:"id"`
	DeletedAt sql.NullTime `db:"deleted_at" json:"deleted_at"`
}

func (q *Queries) DeleteUser(ctx context.Context, arg DeleteUserParams) (*TbUser, error) {
	row := q.queryRow(ctx, q.deleteUserStmt, DeleteUser, arg.ID, arg.DeletedAt)
	var i TbUser
	err := row.Scan(
		&i.ID,
		&i.RoleID,
		&i.PhoneNumber,
		&i.Password,
		&i.Name,
		&i.Avatar,
		&i.Openid,
		&i.Unionid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const GetUser = `-- name: GetUser :one
SELECT id, role_id, phone_number, password, name, avatar, openid, unionid, created_at, updated_at, deleted_at FROM tb_users WHERE id = $1 AND deleted_at IS NULL LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (*TbUser, error) {
	row := q.queryRow(ctx, q.getUserStmt, GetUser, id)
	var i TbUser
	err := row.Scan(
		&i.ID,
		&i.RoleID,
		&i.PhoneNumber,
		&i.Password,
		&i.Name,
		&i.Avatar,
		&i.Openid,
		&i.Unionid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const GetUserByPhone = `-- name: GetUserByPhone :one
SELECT id, role_id, phone_number, password, name, avatar, openid, unionid, created_at, updated_at, deleted_at FROM tb_users WHERE phone_number = $1 LIMIT 1
`

func (q *Queries) GetUserByPhone(ctx context.Context, phoneNumber string) (*TbUser, error) {
	row := q.queryRow(ctx, q.getUserByPhoneStmt, GetUserByPhone, phoneNumber)
	var i TbUser
	err := row.Scan(
		&i.ID,
		&i.RoleID,
		&i.PhoneNumber,
		&i.Password,
		&i.Name,
		&i.Avatar,
		&i.Openid,
		&i.Unionid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const ListUsers = `-- name: ListUsers :many
SELECT id, role_id, phone_number, password, name, avatar, openid, unionid, created_at, updated_at, deleted_at FROM tb_users WHERE deleted_at IS NULL ORDER BY id LIMIT $1 OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]*TbUser, error) {
	rows, err := q.query(ctx, q.listUsersStmt, ListUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*TbUser{}
	for rows.Next() {
		var i TbUser
		if err := rows.Scan(
			&i.ID,
			&i.RoleID,
			&i.PhoneNumber,
			&i.Password,
			&i.Name,
			&i.Avatar,
			&i.Openid,
			&i.Unionid,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateUser = `-- name: UpdateUser :one
UPDATE tb_users 
SET 
    name = $2,
    avatar = $3,
    openid = $4,
    unionid = $5,
    updated_at = $6
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, role_id, phone_number, password, name, avatar, openid, unionid, created_at, updated_at, deleted_at
`

type UpdateUserParams struct {
	ID        int64          `db:"id" json:"id"`
	Name      string         `db:"name" json:"name"`
	Avatar    sql.NullString `db:"avatar" json:"avatar"`
	Openid    sql.NullString `db:"openid" json:"openid"`
	Unionid   sql.NullString `db:"unionid" json:"unionid"`
	UpdatedAt time.Time      `db:"updated_at" json:"updated_at"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (*TbUser, error) {
	row := q.queryRow(ctx, q.updateUserStmt, UpdateUser,
		arg.ID,
		arg.Name,
		arg.Avatar,
		arg.Openid,
		arg.Unionid,
		arg.UpdatedAt,
	)
	var i TbUser
	err := row.Scan(
		&i.ID,
		&i.RoleID,
		&i.PhoneNumber,
		&i.Password,
		&i.Name,
		&i.Avatar,
		&i.Openid,
		&i.Unionid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}
