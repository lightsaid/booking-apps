// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: payments.sql

package dbrepo

import (
	"context"
	"database/sql"
	"time"
)

const CreatePayment = `-- name: CreatePayment :one
INSERT INTO tb_payments(
    "user_id", "ticket_id", 
    "NumberOfSeats", "payment_date", 
    "payment_method", "payment_amount"
) VALUES ($1, $2, $3, $4, $5, $6) RETURNING id, user_id, ticket_id, "NumberOfSeats", payment_date, payment_method, payment_amount, created_at, updated_at, deleted_at
`

type CreatePaymentParams struct {
	UserID        sql.NullInt64 `db:"user_id" json:"user_id"`
	TicketID      sql.NullInt64 `db:"ticket_id" json:"ticket_id"`
	NumberOfSeats int32         `db:"NumberOfSeats" json:"NumberOfSeats"`
	PaymentDate   time.Time     `db:"payment_date" json:"payment_date"`
	PaymentMethod string        `db:"payment_method" json:"payment_method"`
	PaymentAmount int32         `db:"payment_amount" json:"payment_amount"`
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) (*TbPayment, error) {
	row := q.queryRow(ctx, q.createPaymentStmt, CreatePayment,
		arg.UserID,
		arg.TicketID,
		arg.NumberOfSeats,
		arg.PaymentDate,
		arg.PaymentMethod,
		arg.PaymentAmount,
	)
	var i TbPayment
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TicketID,
		&i.NumberOfSeats,
		&i.PaymentDate,
		&i.PaymentMethod,
		&i.PaymentAmount,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const DeletePayment = `-- name: DeletePayment :one
UPDATE tb_payments
SET deleted_at = now() WHERE deleted_at IS NULL RETURNING id, user_id, ticket_id, "NumberOfSeats", payment_date, payment_method, payment_amount, created_at, updated_at, deleted_at
`

func (q *Queries) DeletePayment(ctx context.Context) (*TbPayment, error) {
	row := q.queryRow(ctx, q.deletePaymentStmt, DeletePayment)
	var i TbPayment
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TicketID,
		&i.NumberOfSeats,
		&i.PaymentDate,
		&i.PaymentMethod,
		&i.PaymentAmount,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const GetPayment = `-- name: GetPayment :one
SELECT id, user_id, ticket_id, "NumberOfSeats", payment_date, payment_method, payment_amount, created_at, updated_at, deleted_at FROM tb_payments WHERE id=$1 AND deleted_at IS NULL LIMIT 1
`

func (q *Queries) GetPayment(ctx context.Context, id int64) (*TbPayment, error) {
	row := q.queryRow(ctx, q.getPaymentStmt, GetPayment, id)
	var i TbPayment
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TicketID,
		&i.NumberOfSeats,
		&i.PaymentDate,
		&i.PaymentMethod,
		&i.PaymentAmount,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const ListPayments = `-- name: ListPayments :many
SELECT id, user_id, ticket_id, "NumberOfSeats", payment_date, payment_method, payment_amount, created_at, updated_at, deleted_at FROM tb_payments WHERE deleted_at IS NULL LIMIT $1 OFFSET $2
`

type ListPaymentsParams struct {
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

func (q *Queries) ListPayments(ctx context.Context, arg ListPaymentsParams) ([]*TbPayment, error) {
	rows, err := q.query(ctx, q.listPaymentsStmt, ListPayments, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*TbPayment{}
	for rows.Next() {
		var i TbPayment
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.TicketID,
			&i.NumberOfSeats,
			&i.PaymentDate,
			&i.PaymentMethod,
			&i.PaymentAmount,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdatePayment = `-- name: UpdatePayment :one
UPDATE tb_payments
SET 
    "user_id"=$2, "ticket_id"=$3, 
    "NumberOfSeats"=$4, "payment_date"=$5,
    "payment_method"=$6, "payment_amount"=$7
WHERE id=$1 AND  deleted_at IS NULL RETURNING id, user_id, ticket_id, "NumberOfSeats", payment_date, payment_method, payment_amount, created_at, updated_at, deleted_at
`

type UpdatePaymentParams struct {
	ID            int64         `db:"id" json:"id"`
	UserID        sql.NullInt64 `db:"user_id" json:"user_id"`
	TicketID      sql.NullInt64 `db:"ticket_id" json:"ticket_id"`
	NumberOfSeats int32         `db:"NumberOfSeats" json:"NumberOfSeats"`
	PaymentDate   time.Time     `db:"payment_date" json:"payment_date"`
	PaymentMethod string        `db:"payment_method" json:"payment_method"`
	PaymentAmount int32         `db:"payment_amount" json:"payment_amount"`
}

func (q *Queries) UpdatePayment(ctx context.Context, arg UpdatePaymentParams) (*TbPayment, error) {
	row := q.queryRow(ctx, q.updatePaymentStmt, UpdatePayment,
		arg.ID,
		arg.UserID,
		arg.TicketID,
		arg.NumberOfSeats,
		arg.PaymentDate,
		arg.PaymentMethod,
		arg.PaymentAmount,
	)
	var i TbPayment
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TicketID,
		&i.NumberOfSeats,
		&i.PaymentDate,
		&i.PaymentMethod,
		&i.PaymentAmount,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}
