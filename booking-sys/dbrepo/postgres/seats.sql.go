// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: seats.sql

package dbrepo

import (
	"context"
)

const CreateSeat = `-- name: CreateSeat :one
INSERT INTO tb_seats(
    "hall_id", "col_number", "row_number", "status"
) VALUES ($1, $2, $3, $4) RETURNING id, hall_id, col_number, row_number, status, created_at, updated_at, deleted_at
`

type CreateSeatParams struct {
	HallID    int64  `db:"hall_id" json:"hall_id"`
	ColNumber int32  `db:"col_number" json:"col_number"`
	RowNumber int32  `db:"row_number" json:"row_number"`
	Status    string `db:"status" json:"status"`
}

func (q *Queries) CreateSeat(ctx context.Context, arg CreateSeatParams) (*TbSeat, error) {
	row := q.queryRow(ctx, q.createSeatStmt, CreateSeat,
		arg.HallID,
		arg.ColNumber,
		arg.RowNumber,
		arg.Status,
	)
	var i TbSeat
	err := row.Scan(
		&i.ID,
		&i.HallID,
		&i.ColNumber,
		&i.RowNumber,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const DeleteSeat = `-- name: DeleteSeat :one
UPDATE tb_seats
SET deleted_at = now() WHERE deleted_at IS NULL RETURNING id, hall_id, col_number, row_number, status, created_at, updated_at, deleted_at
`

func (q *Queries) DeleteSeat(ctx context.Context) (*TbSeat, error) {
	row := q.queryRow(ctx, q.deleteSeatStmt, DeleteSeat)
	var i TbSeat
	err := row.Scan(
		&i.ID,
		&i.HallID,
		&i.ColNumber,
		&i.RowNumber,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const GetSeat = `-- name: GetSeat :one
SELECT id, hall_id, col_number, row_number, status, created_at, updated_at, deleted_at FROM tb_seats WHERE id=$1 AND deleted_at IS NULL LIMIT 1
`

func (q *Queries) GetSeat(ctx context.Context, id int64) (*TbSeat, error) {
	row := q.queryRow(ctx, q.getSeatStmt, GetSeat, id)
	var i TbSeat
	err := row.Scan(
		&i.ID,
		&i.HallID,
		&i.ColNumber,
		&i.RowNumber,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const ListSeats = `-- name: ListSeats :many
SELECT id, hall_id, col_number, row_number, status, created_at, updated_at, deleted_at FROM tb_seats WHERE deleted_at IS NULL LIMIT $1 OFFSET $2
`

type ListSeatsParams struct {
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

func (q *Queries) ListSeats(ctx context.Context, arg ListSeatsParams) ([]*TbSeat, error) {
	rows, err := q.query(ctx, q.listSeatsStmt, ListSeats, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*TbSeat{}
	for rows.Next() {
		var i TbSeat
		if err := rows.Scan(
			&i.ID,
			&i.HallID,
			&i.ColNumber,
			&i.RowNumber,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateSeat = `-- name: UpdateSeat :one
UPDATE tb_seats
SET 
    "hall_id"=$2, "col_number"=$3, "row_number"=$4, "status"=$5
WHERE id=$1 AND  deleted_at IS NULL RETURNING id, hall_id, col_number, row_number, status, created_at, updated_at, deleted_at
`

type UpdateSeatParams struct {
	ID        int64  `db:"id" json:"id"`
	HallID    int64  `db:"hall_id" json:"hall_id"`
	ColNumber int32  `db:"col_number" json:"col_number"`
	RowNumber int32  `db:"row_number" json:"row_number"`
	Status    string `db:"status" json:"status"`
}

func (q *Queries) UpdateSeat(ctx context.Context, arg UpdateSeatParams) (*TbSeat, error) {
	row := q.queryRow(ctx, q.updateSeatStmt, UpdateSeat,
		arg.ID,
		arg.HallID,
		arg.ColNumber,
		arg.RowNumber,
		arg.Status,
	)
	var i TbSeat
	err := row.Scan(
		&i.ID,
		&i.HallID,
		&i.ColNumber,
		&i.RowNumber,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}
